{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\n\nconst codeSlice = createSlice({\n  name: \"codeSlice\",\n  initialState: {\n    codeState: false,\n    mode: \"css\"\n  },\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    updateCSS() {},\n\n    updateHTML() {},\n\n    updateJS() {},\n\n    toggleCode(state, action) {\n      state.codeState = !state.codeState;\n    },\n\n    setMode(state, action) {\n      state.mode = action.payload;\n    }\n\n  }\n});\nexport const {\n  toggleCode,\n  setMode\n} = codeSlice.actions;\nexport default codeSlice.reducer;","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/src/reducers/codeReducer.js"],"names":["createSlice","codeSlice","name","initialState","codeState","mode","reducers","updateCSS","updateHTML","updateJS","toggleCode","state","action","setMode","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,WADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,KADC;AAEZC,IAAAA,IAAI,EAAE;AAFM,GAFc;AAO5B;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,GAAG,CAAE,CADN;;AAERC,IAAAA,UAAU,GAAG,CAAE,CAFP;;AAGRC,IAAAA,QAAQ,GAAG,CAAE,CAHL;;AAIRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACP,SAAN,GAAkB,CAACO,KAAK,CAACP,SAAzB;AAAoC,KAJxD;;AAKRS,IAAAA,OAAO,CAACF,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACE,OAApB;AAA6B;;AAL9C;AARkB,CAAD,CAA7B;AAiBA,OAAO,MAAM;AAAEJ,EAAAA,UAAF;AAAcG,EAAAA;AAAd,IAA0BZ,SAAS,CAACc,OAA1C;AACP,eAAed,SAAS,CAACe,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\nconst codeSlice = createSlice({\n  name: \"codeSlice\",\n  initialState: {\n    codeState: false,\n    mode: \"css\",\n  },\n\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    updateCSS() {},\n    updateHTML() {},\n    updateJS() {},\n    toggleCode(state, action) { state.codeState = !state.codeState },\n    setMode(state, action) { state.mode = action.payload },\n  }\n});\n\nexport const { toggleCode, setMode } = codeSlice.actions;\nexport default codeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}