{"ast":null,"code":"// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar _ = require('lodash'),\n    submittableSelector = 'input,select,textarea,keygen',\n    rCRLF = /\\r?\\n/g,\n    rcheckableType = /^(?:checkbox|radio)$/i,\n    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i;\n\nexports.serializeArray = function () {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function () {\n    var elem = this;\n    var $elem = Cheerio(elem);\n\n    if (elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    } else {\n      return $elem.filter(submittableSelector).toArray();\n    }\n  }).filter(function () {\n    var $elem = Cheerio(this);\n    var type = $elem.attr('type'); // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n\n    return $elem.attr('name') && !$elem.is(':disabled') && // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n    !rsubmitterTypes.test(type) && ( // and are either checked/don't have a checkable state\n    $elem.attr('checked') || !rcheckableType.test(type)); // Convert each of the elements to its value(s)\n  }).map(function (i, elem) {\n    var $elem = Cheerio(elem);\n    var name = $elem.attr('name');\n    var val = $elem.val(); // If there is no value set (e.g. `undefined`, `null`), then return nothing\n\n    if (val == null) {\n      return null;\n    } else {\n      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n      if (Array.isArray(val)) {\n        return _.map(val, function (val) {\n          // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n          //   These can occur inside of `<textarea>'s`\n          return {\n            name: name,\n            value: val.replace(rCRLF, '\\r\\n')\n          };\n        }); // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n      } else {\n        return {\n          name: name,\n          value: val.replace(rCRLF, '\\r\\n')\n        };\n      }\n    } // Convert our result to an array\n\n  }).get();\n};","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/node_modules/cheerio/lib/api/forms.js"],"names":["_","require","submittableSelector","rCRLF","rcheckableType","rsubmitterTypes","exports","serializeArray","Cheerio","constructor","map","elem","$elem","name","find","toArray","filter","type","attr","is","test","i","val","Array","isArray","value","replace","get"],"mappings":"AAAA;AACA;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;AAAA,IACIC,mBAAmB,GAAG,8BAD1B;AAAA,IAEIC,KAAK,GAAG,QAFZ;AAAA,IAGIC,cAAc,GAAG,uBAHrB;AAAA,IAIIC,eAAe,GAAG,uCAJtB;;AAMAC,OAAO,CAACC,cAAR,GAAyB,YAAW;AAClC;AACA,MAAIC,OAAO,GAAG,KAAKC,WAAnB;AACA,SAAO,KAAKC,GAAL,CAAS,YAAW;AACvB,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,KAAK,GAAGJ,OAAO,CAACG,IAAD,CAAnB;;AACA,QAAIA,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAOD,KAAK,CAACE,IAAN,CAAWZ,mBAAX,EAAgCa,OAAhC,EAAP;AACD,KAFD,MAEO;AACL,aAAOH,KAAK,CAACI,MAAN,CAAad,mBAAb,EAAkCa,OAAlC,EAAP;AACD;AACF,GARI,EAQFC,MARE,CAQK,YAAW;AACnB,QAAIJ,KAAK,GAAGJ,OAAO,CAAC,IAAD,CAAnB;AACA,QAAIS,IAAI,GAAGL,KAAK,CAACM,IAAN,CAAW,MAAX,CAAX,CAFmB,CAInB;;AACA,WAAON,KAAK,CAACM,IAAN,CAAW,MAAX,KAAsB,CAACN,KAAK,CAACO,EAAN,CAAS,WAAT,CAAvB,IACL;AACA,KAACd,eAAe,CAACe,IAAhB,CAAqBH,IAArB,CAFI,MAGL;AACCL,IAAAA,KAAK,CAACM,IAAN,CAAW,SAAX,KAAyB,CAACd,cAAc,CAACgB,IAAf,CAAoBH,IAApB,CAJtB,CAAP,CALmB,CAUrB;AACC,GAnBI,EAmBFP,GAnBE,CAmBE,UAASW,CAAT,EAAYV,IAAZ,EAAkB;AACvB,QAAIC,KAAK,GAAGJ,OAAO,CAACG,IAAD,CAAnB;AACA,QAAIE,IAAI,GAAGD,KAAK,CAACM,IAAN,CAAW,MAAX,CAAX;AACA,QAAII,GAAG,GAAGV,KAAK,CAACU,GAAN,EAAV,CAHuB,CAKvB;;AACA,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,IAAP;AACD,KAFD,MAEO;AACL;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtB,eAAOtB,CAAC,CAACU,GAAF,CAAMY,GAAN,EAAW,UAASA,GAAT,EAAc;AAC9B;AACA;AACA,iBAAO;AAACT,YAAAA,IAAI,EAAEA,IAAP;AAAaY,YAAAA,KAAK,EAAEH,GAAG,CAACI,OAAJ,CAAavB,KAAb,EAAoB,MAApB;AAApB,WAAP;AACD,SAJM,CAAP,CADsB,CAMxB;AACC,OAPD,MAOO;AACL,eAAO;AAACU,UAAAA,IAAI,EAAEA,IAAP;AAAaY,UAAAA,KAAK,EAAEH,GAAG,CAACI,OAAJ,CAAavB,KAAb,EAAoB,MAApB;AAApB,SAAP;AACD;AACF,KApBsB,CAqBzB;;AACC,GAzCI,EAyCFwB,GAzCE,EAAP;AA0CD,CA7CD","sourcesContent":["// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar _ = require('lodash'),\n    submittableSelector = 'input,select,textarea,keygen',\n    rCRLF = /\\r?\\n/g,\n    rcheckableType = /^(?:checkbox|radio)$/i,\n    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i;\n\nexports.serializeArray = function() {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function() {\n      var elem = this;\n      var $elem = Cheerio(elem);\n      if (elem.name === 'form') {\n        return $elem.find(submittableSelector).toArray();\n      } else {\n        return $elem.filter(submittableSelector).toArray();\n      }\n    }).filter(function() {\n      var $elem = Cheerio(this);\n      var type = $elem.attr('type');\n\n      // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n      return $elem.attr('name') && !$elem.is(':disabled') &&\n        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        !rsubmitterTypes.test(type) &&\n        // and are either checked/don't have a checkable state\n        ($elem.attr('checked') || !rcheckableType.test(type));\n    // Convert each of the elements to its value(s)\n    }).map(function(i, elem) {\n      var $elem = Cheerio(elem);\n      var name = $elem.attr('name');\n      var val = $elem.val();\n\n      // If there is no value set (e.g. `undefined`, `null`), then return nothing\n      if (val == null) {\n        return null;\n      } else {\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(val)) {\n          return _.map(val, function(val) {\n            // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n            //   These can occur inside of `<textarea>'s`\n            return {name: name, value: val.replace( rCRLF, '\\r\\n' )};\n          });\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        } else {\n          return {name: name, value: val.replace( rCRLF, '\\r\\n' )};\n        }\n      }\n    // Convert our result to an array\n    }).get();\n};\n"]},"metadata":{},"sourceType":"script"}