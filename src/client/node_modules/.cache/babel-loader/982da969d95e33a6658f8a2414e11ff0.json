{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\n\nconst loadSlice = createSlice({\n  name: \"loadSlice\",\n  initialState: {\n    loadState: false,\n    components: []\n  },\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    toggleLoad(state, action) {\n      state.loadState = !state.loadState;\n    },\n\n    setComponents(state, action) {\n      state.components = action.payload;\n    },\n\n    resetComponents(state, action) {\n      state.components = [];\n    }\n\n  }\n});\nexport const {\n  toggleLoad,\n  setComponents,\n  resetComponents\n} = loadSlice.actions;\nexport default loadSlice.reducer;","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/src/reducers/loadReducer.js"],"names":["createSlice","loadSlice","name","initialState","loadState","components","reducers","toggleLoad","state","action","setComponents","payload","resetComponents","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,WADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,KADC;AAEZC,IAAAA,UAAU,EAAE;AAFA,GAFc;AAO5B;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACJ,SAAN,GAAkB,CAACI,KAAK,CAACJ,SAAzB;AAAoC,KADxD;;AAERM,IAAAA,aAAa,CAACF,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACE,OAA1B;AAAmC,KAF1D;;AAGRC,IAAAA,eAAe,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACH,UAAN,GAAmB,EAAnB;AAAuB;;AAHhD;AARkB,CAAD,CAA7B;AAeA,OAAO,MAAM;AAAEE,EAAAA,UAAF;AAAcG,EAAAA,aAAd;AAA6BE,EAAAA;AAA7B,IAAiDX,SAAS,CAACY,OAAjE;AACP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\nconst loadSlice = createSlice({\n  name: \"loadSlice\",\n  initialState: {\n    loadState: false,\n    components: [],\n  },\n\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    toggleLoad(state, action) { state.loadState = !state.loadState },\n    setComponents(state, action) { state.components = action.payload },\n    resetComponents(state, action) { state.components = [] },\n  }\n});\n\nexport const { toggleLoad, setComponents, resetComponents } = loadSlice.actions;\nexport default loadSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}