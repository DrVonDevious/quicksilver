{"ast":null,"code":"/**\n * Module dependencies\n */\nvar select = require('css-select'),\n    parse = require('./parse'),\n    serialize = require('dom-serializer'),\n    _ = require('lodash');\n/**\n * $.load(str)\n */\n\n\nexports.load = function (content, options) {\n  var Cheerio = require('./cheerio');\n\n  options = _.defaults(options || {}, Cheerio.prototype.options);\n  var root = parse(content, options);\n\n  var initialize = function (selector, context, r, opts) {\n    if (!(this instanceof initialize)) {\n      return new initialize(selector, context, r, opts);\n    }\n\n    opts = _.defaults(opts || {}, options);\n    return Cheerio.call(this, selector, context, r || root, opts);\n  }; // Ensure that selections created by the \"loaded\" `initialize` function are\n  // true Cheerio instances.\n\n\n  initialize.prototype = Object.create(Cheerio.prototype);\n  initialize.prototype.constructor = initialize; // Mimic jQuery's prototype alias for plugin authors.\n\n  initialize.fn = initialize.prototype; // Keep a reference to the top-level scope so we can chain methods that implicitly \n  // resolve selectors; e.g. $(\"<span>\").(\".bar\"), which otherwise loses ._root\n\n  initialize.prototype._originalRoot = root; // Add in the static methods\n\n  _.merge(initialize, exports); // Add in the root\n\n\n  initialize._root = root; // store options\n\n  initialize._options = options;\n  return initialize;\n};\n/*\n* Helper function\n*/\n\n\nfunction render(that, dom, options) {\n  if (!dom) {\n    if (that._root && that._root.children) {\n      dom = that._root.children;\n    } else {\n      return '';\n    }\n  } else if (typeof dom === 'string') {\n    dom = select(dom, that._root, options);\n  }\n\n  return serialize(dom, options);\n}\n/**\n * $.html([selector | dom], [options])\n */\n\n\nexports.html = function (dom, options) {\n  var Cheerio = require('./cheerio'); // be flexible about parameters, sometimes we call html(),\n  // with options as only parameter\n  // check dom argument for dom element specific properties\n  // assume there is no 'length' or 'type' properties in the options object\n\n\n  if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) && !('type' in dom)) {\n    options = dom;\n    dom = undefined;\n  } // sometimes $.html() used without preloading html\n  // so fallback non existing options to the default ones\n\n\n  options = _.defaults(options || {}, this._options, Cheerio.prototype.options);\n  return render(this, dom, options);\n};\n/**\n * $.xml([selector | dom])\n */\n\n\nexports.xml = function (dom) {\n  var options = _.defaults({\n    xmlMode: true\n  }, this._options);\n\n  return render(this, dom, options);\n};\n/**\n * $.text(dom)\n */\n\n\nexports.text = function (elems) {\n  if (!elems) return '';\n  var ret = '',\n      len = elems.length,\n      elem;\n\n  for (var i = 0; i < len; i++) {\n    elem = elems[i];\n    if (elem.type === 'text') ret += elem.data;else if (elem.children && elem.type !== 'comment') {\n      ret += exports.text(elem.children);\n    }\n  }\n\n  return ret;\n};\n/**\n * $.parseHTML(data [, context ] [, keepScripts ])\n * Parses a string into an array of DOM nodes. The `context` argument has no\n * meaning for Cheerio, but it is maintained for API compatibility with jQuery.\n */\n\n\nexports.parseHTML = function (data, context, keepScripts) {\n  var parsed;\n\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  parsed = this.load(data);\n\n  if (!keepScripts) {\n    parsed('script').remove();\n  } // The `children` array is used by Cheerio internally to group elements that\n  // share the same parents. When nodes created through `parseHTML` are\n  // inserted into previously-existing DOM structures, they will be removed\n  // from the `children` array. The results of `parseHTML` should remain\n  // constant across these operations, so a shallow copy should be returned.\n\n\n  return parsed.root()[0].children.slice();\n};\n/**\n * $.root()\n */\n\n\nexports.root = function () {\n  return this(this._root);\n};\n/**\n * $.contains()\n */\n\n\nexports.contains = function (container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  } // Step up the descendants, stopping when the root element is reached\n  // (signaled by `.parent` returning a reference to the same object)\n\n\n  while (contained && contained !== contained.parent) {\n    contained = contained.parent;\n\n    if (contained === container) {\n      return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/node_modules/cheerio/lib/static.js"],"names":["select","require","parse","serialize","_","exports","load","content","options","Cheerio","defaults","prototype","root","initialize","selector","context","r","opts","call","Object","create","constructor","fn","_originalRoot","merge","_root","_options","render","that","dom","children","html","toString","undefined","xml","xmlMode","text","elems","ret","len","length","elem","i","type","data","parseHTML","keepScripts","parsed","remove","slice","contains","container","contained","parent"],"mappings":"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","sourcesContent":["/**\n * Module dependencies\n */\n\nvar select = require('css-select'),\n    parse = require('./parse'),\n    serialize = require('dom-serializer'),\n    _ = require('lodash');\n\n/**\n * $.load(str)\n */\n\nexports.load = function(content, options) {\n  var Cheerio = require('./cheerio');\n\n  options = _.defaults(options || {}, Cheerio.prototype.options);\n\n  var root = parse(content, options);\n\n  var initialize = function(selector, context, r, opts) {\n    if (!(this instanceof initialize)) {\n      return new initialize(selector, context, r, opts);\n    }\n    opts = _.defaults(opts || {}, options);\n    return Cheerio.call(this, selector, context, r || root, opts);\n  };\n\n  // Ensure that selections created by the \"loaded\" `initialize` function are\n  // true Cheerio instances.\n  initialize.prototype = Object.create(Cheerio.prototype);\n  initialize.prototype.constructor = initialize;\n\n  // Mimic jQuery's prototype alias for plugin authors.\n  initialize.fn = initialize.prototype;\n\n  // Keep a reference to the top-level scope so we can chain methods that implicitly \n  // resolve selectors; e.g. $(\"<span>\").(\".bar\"), which otherwise loses ._root\n  initialize.prototype._originalRoot = root;\n\n  // Add in the static methods\n  _.merge(initialize, exports);\n\n  // Add in the root\n  initialize._root = root;\n  // store options\n  initialize._options = options;\n\n  return initialize;\n};\n\n/*\n* Helper function\n*/\n\nfunction render(that, dom, options) {\n  if (!dom) {\n    if (that._root && that._root.children) {\n      dom = that._root.children;\n    } else {\n      return '';\n    }\n  } else if (typeof dom === 'string') {\n    dom = select(dom, that._root, options);\n  }\n\n  return serialize(dom, options);\n}\n\n/**\n * $.html([selector | dom], [options])\n */\n\nexports.html = function(dom, options) {\n  var Cheerio = require('./cheerio');\n\n  // be flexible about parameters, sometimes we call html(),\n  // with options as only parameter\n  // check dom argument for dom element specific properties\n  // assume there is no 'length' or 'type' properties in the options object\n  if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) && !('type' in dom))\n  {\n    options = dom;\n    dom = undefined;\n  }\n\n  // sometimes $.html() used without preloading html\n  // so fallback non existing options to the default ones\n  options = _.defaults(options || {}, this._options, Cheerio.prototype.options);\n\n  return render(this, dom, options);\n};\n\n/**\n * $.xml([selector | dom])\n */\n\nexports.xml = function(dom) {\n  var options = _.defaults({xmlMode: true}, this._options);\n\n  return render(this, dom, options);\n};\n\n/**\n * $.text(dom)\n */\n\nexports.text = function(elems) {\n  if (!elems) return '';\n\n  var ret = '',\n      len = elems.length,\n      elem;\n\n  for (var i = 0; i < len; i++) {\n    elem = elems[i];\n    if (elem.type === 'text') ret += elem.data;\n    else if (elem.children && elem.type !== 'comment') {\n      ret += exports.text(elem.children);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * $.parseHTML(data [, context ] [, keepScripts ])\n * Parses a string into an array of DOM nodes. The `context` argument has no\n * meaning for Cheerio, but it is maintained for API compatibility with jQuery.\n */\nexports.parseHTML = function(data, context, keepScripts) {\n  var parsed;\n\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  parsed = this.load(data);\n  if (!keepScripts) {\n    parsed('script').remove();\n  }\n\n  // The `children` array is used by Cheerio internally to group elements that\n  // share the same parents. When nodes created through `parseHTML` are\n  // inserted into previously-existing DOM structures, they will be removed\n  // from the `children` array. The results of `parseHTML` should remain\n  // constant across these operations, so a shallow copy should be returned.\n  return parsed.root()[0].children.slice();\n};\n\n/**\n * $.root()\n */\nexports.root = function() {\n  return this(this._root);\n};\n\n/**\n * $.contains()\n */\nexports.contains = function(container, contained) {\n\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  }\n\n  // Step up the descendants, stopping when the root element is reached\n  // (signaled by `.parent` returning a reference to the same object)\n  while (contained && contained !== contained.parent) {\n    contained = contained.parent;\n    if (contained === container) {\n      return true;\n    }\n  }\n\n  return false;\n};\n"]},"metadata":{},"sourceType":"script"}