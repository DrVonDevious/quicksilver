{"ast":null,"code":"var cheerio = require('cheerio');\n\nvar attrs = ['accept', 'acceptCharset', 'accessKey', 'action', 'allowFullScreen', 'allowTransparency', 'alt', 'async', 'autoComplete', 'autoFocus', 'autoPlay', 'capture', 'cellPadding', 'cellSpacing', 'charSet', 'challenge', 'checked', 'classID', 'className', 'cols', 'colSpan', 'content', 'contentEditable', 'contextMenu', 'controls', 'coords', 'crossOrigin', 'data', 'dateTime', 'defer', 'dir', 'disabled', 'download', 'draggable', 'encType', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'frameBorder', 'headers', 'height', 'hidden', 'high', 'href', 'hrefLang', 'htmlFor', 'httpEquiv', 'icon', 'id', 'inputMode', 'keyParams', 'keyType', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight', 'marginWidth', 'max', 'maxLength', 'media', 'mediaGroup', 'method', 'min', 'minLength', 'multiple', 'muted', 'name', 'noValidate', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'radioGroup', 'readOnly', 'rel', 'required', 'role', 'rows', 'rowSpan', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected', 'shape', 'size', 'sizes', 'span', 'spellCheck', 'src', 'srcDoc', 'srcSet', 'start', 'step', 'style', 'summary', 'tabIndex', 'target', 'title', 'type', 'useMap', 'value', 'width', 'wmode', 'wrap'];\n\nfunction convert(html) {\n  // add root element\n  var $ = cheerio.load(html);\n\n  if ($.root().children().length > 1) {\n    html = '<div>' + html + '</div>';\n  }\n\n  html = html.replace(/\\sclass=/g, ' className=').replace(/\\sfor=/g, ' htmlFor=') // replace comments\n  .replace(/<!--/g, '{/*').replace(/-->/g, '*/}');\n  [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"].forEach(function (tag) {\n    var regex = new RegExp('<(' + tag + '[^/]*?)>', 'g');\n    html = html.replace(regex, function (_, str) {\n      return '<' + str + '/>';\n    });\n  }); // replace attrNames\n\n  attrs.forEach(function (attr) {\n    var origin_attr = attr.toLowerCase();\n    var regex = new RegExp('\\\\s' + origin_attr + '=', 'g');\n    html = html.replace(regex, ' ' + attr + '=');\n  }); // replace styles\n\n  html = html.replace(/\\sstyle=\"(.+?)\"/g, function (attr, styles) {\n    var jsxStyles = new StyleParser(styles).toJSXString();\n    return \" style={{\" + jsxStyles + \"}}\";\n  });\n  return html;\n}\n\nmodule.exports = convert; // Codes below are copied from Facebook's html to jsx module.\n\n/**\n * Repeats a string a certain number of times.\n * Also: the future is bright and consists of native string repetition:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n *\n * @param {string} string  String to repeat\n * @param {number} times   Number of times to repeat string. Integer.\n * @see http://jsperf.com/string-repeater/2\n */\n\nfunction repeatString(string, times) {\n  if (times === 1) {\n    return string;\n  }\n\n  if (times < 0) {\n    throw new Error();\n  }\n\n  var repeated = '';\n\n  while (times) {\n    if (times & 1) {\n      repeated += string;\n    }\n\n    if (times >>= 1) {\n      string += string;\n    }\n  }\n\n  return repeated;\n}\n/**\n * Determine if the string ends with the specified substring.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {boolean}\n */\n\n\nfunction endsWith(haystack, needle) {\n  return haystack.slice(-needle.length) === needle;\n}\n/**\n * Trim the specified substring off the string. If the string does not end\n * with the specified substring, this is a no-op.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {string}\n */\n\n\nfunction trimEnd(haystack, needle) {\n  return endsWith(haystack, needle) ? haystack.slice(0, -needle.length) : haystack;\n}\n/**\n * Convert a hyphenated string to camelCase.\n */\n\n\nfunction hyphenToCamelCase(string) {\n  return string.replace(/-(.)/g, function (match, chr) {\n    return chr.toUpperCase();\n  });\n}\n/**\n * Determines if the specified string consists entirely of whitespace.\n */\n\n\nfunction isEmpty(string) {\n  return !/[^\\s]/.test(string);\n}\n/**\n * Determines if the specified string consists entirely of numeric characters.\n */\n\n\nfunction isNumeric(input) {\n  return input !== undefined && input !== null && (typeof input === 'number' || parseInt(input, 10) == input);\n}\n/**\n * Handles parsing of inline styles\n *\n * @param {string} rawStyle Raw style attribute\n * @constructor\n */\n\n\nvar StyleParser = function StyleParser(rawStyle) {\n  this.parse(rawStyle);\n};\n\nStyleParser.prototype = {\n  /**\n   * Parse the specified inline style attribute value\n   * @param {string} rawStyle Raw style attribute\n   */\n  parse: function parse(rawStyle) {\n    this.styles = {};\n    rawStyle.split(';').forEach(function (style) {\n      style = style.trim();\n      var firstColon = style.indexOf(':');\n      var key = style.substr(0, firstColon);\n      var value = style.substr(firstColon + 1).trim();\n\n      if (key !== '') {\n        this.styles[key] = value;\n      }\n    }, this);\n  },\n\n  /**\n   * Convert the style information represented by this parser into a JSX\n   * string\n   *\n   * @return {string}\n   */\n  toJSXString: function toJSXString() {\n    var output = [];\n\n    for (var key in this.styles) {\n      if (!this.styles.hasOwnProperty(key)) {\n        continue;\n      }\n\n      output.push(this.toJSXKey(key) + ': ' + this.toJSXValue(this.styles[key]));\n    }\n\n    return output.join(', ');\n  },\n\n  /**\n   * Convert the CSS style key to a JSX style key\n   *\n   * @param {string} key CSS style key\n   * @return {string} JSX style key\n   */\n  toJSXKey: function toJSXKey(key) {\n    return hyphenToCamelCase(key);\n  },\n\n  /**\n   * Convert the CSS style value to a JSX style value\n   *\n   * @param {string} value CSS style value\n   * @return {string} JSX style value\n   */\n  toJSXValue: function toJSXValue(value) {\n    if (isNumeric(value)) {\n      // If numeric, no quotes\n      return value;\n    } else {\n      // Proably a string, wrap it in quotes\n      return '\\'' + value.replace(/'/g, '\"') + '\\'';\n    }\n  }\n};","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/client/node_modules/html-to-jsx/index.js"],"names":["cheerio","require","attrs","convert","html","$","load","root","children","length","replace","forEach","tag","regex","RegExp","_","str","attr","origin_attr","toLowerCase","styles","jsxStyles","StyleParser","toJSXString","module","exports","repeatString","string","times","Error","repeated","endsWith","haystack","needle","slice","trimEnd","hyphenToCamelCase","match","chr","toUpperCase","isEmpty","test","isNumeric","input","undefined","parseInt","rawStyle","parse","prototype","split","style","trim","firstColon","indexOf","key","substr","value","output","hasOwnProperty","push","toJSXKey","toJSXValue","join"],"mappings":"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","sourcesContent":["var cheerio = require('cheerio');\n\nvar attrs = [\n  'accept',\n  'acceptCharset',\n  'accessKey',\n  'action',\n  'allowFullScreen',\n  'allowTransparency',\n  'alt',\n  'async',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'capture',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'challenge',\n  'checked',\n  'classID',\n  'className',\n  'cols',\n  'colSpan',\n  'content',\n  'contentEditable',\n  'contextMenu',\n  'controls',\n  'coords',\n  'crossOrigin',\n  'data',\n  'dateTime',\n  'defer',\n  'dir',\n  'disabled',\n  'download',\n  'draggable',\n  'encType',\n  'form',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'headers',\n  'height',\n  'hidden',\n  'high',\n  'href',\n  'hrefLang',\n  'htmlFor',\n  'httpEquiv',\n  'icon',\n  'id',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'label',\n  'lang',\n  'list',\n  'loop',\n  'low',\n  'manifest',\n  'marginHeight',\n  'marginWidth',\n  'max',\n  'maxLength',\n  'media',\n  'mediaGroup',\n  'method',\n  'min',\n  'minLength',\n  'multiple',\n  'muted',\n  'name',\n  'noValidate',\n  'open',\n  'optimum',\n  'pattern',\n  'placeholder',\n  'poster',\n  'preload',\n  'radioGroup',\n  'readOnly',\n  'rel',\n  'required',\n  'role',\n  'rows',\n  'rowSpan',\n  'sandbox',\n  'scope',\n  'scoped',\n  'scrolling',\n  'seamless',\n  'selected',\n  'shape',\n  'size',\n  'sizes',\n  'span',\n  'spellCheck',\n  'src',\n  'srcDoc',\n  'srcSet',\n  'start',\n  'step',\n  'style',\n  'summary',\n  'tabIndex',\n  'target',\n  'title',\n  'type',\n  'useMap',\n  'value',\n  'width',\n  'wmode',\n  'wrap'\n];\n\nfunction convert(html) {\n  // add root element\n  var $ = cheerio.load(html);\n  if ($.root().children().length > 1) {\n    html = '<div>' + html + '</div>';\n  }\n\n  html = html\n    .replace(/\\sclass=/g, ' className=')\n    .replace(/\\sfor=/g, ' htmlFor=')\n    // replace comments\n    .replace(/<!--/g, '{/*')\n    .replace(/-->/g, '*/}');\n\n  [\n    \"area\",\n    \"base\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n  ].forEach(function (tag) {\n    var regex = new RegExp('<(' + tag + '[^/]*?)>', 'g');\n    html = html\n      .replace(regex, function (_, str) {\n        return '<' + str + '/>';\n      });\n  });\n\n  // replace attrNames\n  attrs.forEach(function(attr) {\n    var origin_attr = attr.toLowerCase();\n    var regex = new RegExp('\\\\s' + origin_attr + '=', 'g');\n    html = html.replace(regex, ' ' + attr + '=');\n  });\n\n  // replace styles\n  html = html.replace(/\\sstyle=\"(.+?)\"/g, function(attr, styles){\n    var jsxStyles = new StyleParser(styles).toJSXString();\n    return \" style={{\" + jsxStyles + \"}}\";\n  });\n  return html;\n}\n\nmodule.exports = convert;\n\n// Codes below are copied from Facebook's html to jsx module.\n\n/**\n * Repeats a string a certain number of times.\n * Also: the future is bright and consists of native string repetition:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n *\n * @param {string} string  String to repeat\n * @param {number} times   Number of times to repeat string. Integer.\n * @see http://jsperf.com/string-repeater/2\n */\nfunction repeatString(string, times) {\n  if (times === 1) {\n    return string;\n  }\n  if (times < 0) { throw new Error(); }\n  var repeated = '';\n  while (times) {\n    if (times & 1) {\n      repeated += string;\n    }\n    if (times >>= 1) {\n      string += string;\n    }\n  }\n  return repeated;\n}\n\n/**\n * Determine if the string ends with the specified substring.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {boolean}\n */\nfunction endsWith(haystack, needle) {\n  return haystack.slice(-needle.length) === needle;\n}\n\n/**\n * Trim the specified substring off the string. If the string does not end\n * with the specified substring, this is a no-op.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {string}\n */\nfunction trimEnd(haystack, needle) {\n  return endsWith(haystack, needle)\n    ? haystack.slice(0, -needle.length)\n    : haystack;\n}\n\n/**\n * Convert a hyphenated string to camelCase.\n */\nfunction hyphenToCamelCase(string) {\n  return string.replace(/-(.)/g, function(match, chr) {\n    return chr.toUpperCase();\n  });\n}\n\n/**\n * Determines if the specified string consists entirely of whitespace.\n */\nfunction isEmpty(string) {\n   return !/[^\\s]/.test(string);\n}\n\n/**\n * Determines if the specified string consists entirely of numeric characters.\n */\nfunction isNumeric(input) {\n  return input !== undefined\n    && input !== null\n    && (typeof input === 'number' || parseInt(input, 10) == input);\n}\n\n/**\n * Handles parsing of inline styles\n *\n * @param {string} rawStyle Raw style attribute\n * @constructor\n */\nvar StyleParser = function(rawStyle) {\n  this.parse(rawStyle);\n};\nStyleParser.prototype = {\n  /**\n   * Parse the specified inline style attribute value\n   * @param {string} rawStyle Raw style attribute\n   */\n  parse: function(rawStyle) {\n    this.styles = {};\n    rawStyle.split(';').forEach(function(style) {\n      style = style.trim();\n      var firstColon = style.indexOf(':');\n      var key = style.substr(0, firstColon);\n      var value = style.substr(firstColon + 1).trim();\n      if (key !== '') {\n        this.styles[key] = value;\n      }\n    }, this);\n  },\n\n  /**\n   * Convert the style information represented by this parser into a JSX\n   * string\n   *\n   * @return {string}\n   */\n  toJSXString: function() {\n    var output = [];\n    for (var key in this.styles) {\n      if (!this.styles.hasOwnProperty(key)) {\n        continue;\n      }\n      output.push(this.toJSXKey(key) + ': ' + this.toJSXValue(this.styles[key]));\n    }\n    return output.join(', ');\n  },\n\n  /**\n   * Convert the CSS style key to a JSX style key\n   *\n   * @param {string} key CSS style key\n   * @return {string} JSX style key\n   */\n  toJSXKey: function(key) {\n    return hyphenToCamelCase(key);\n  },\n\n  /**\n   * Convert the CSS style value to a JSX style value\n   *\n   * @param {string} value CSS style value\n   * @return {string} JSX style value\n   */\n  toJSXValue: function(value) {\n    if (isNumeric(value)) {\n      // If numeric, no quotes\n      return value;\n    } else {\n      // Proably a string, wrap it in quotes\n      return '\\'' + value.replace(/'/g, '\"') + '\\'';\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}