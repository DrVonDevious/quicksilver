{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\n\nconst loadSlice = createSlice({\n  name: \"loadSlice\",\n  initialState: {\n    loadState: false,\n    query: \"\",\n    components: []\n  },\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    toggleLoad(state, action) {\n      state.loadState = !state.loadState;\n    },\n\n    setComponents(state, action) {\n      state.components = action.payload;\n    },\n\n    removeComponent(state, action) {\n      state.components = state.components.filter(c => c.id !== action.payload);\n    },\n\n    resetComponents(state, action) {\n      state.components = [];\n    },\n\n    filterComponents(state, action) {\n      state.query = action.payload;\n    }\n\n  }\n});\nexport const {\n  toggleLoad,\n  setComponents,\n  resetComponents,\n  removeComponent,\n  filterComponents\n} = loadSlice.actions;\nexport default loadSlice.reducer;","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/src/reducers/loadReducer.js"],"names":["createSlice","loadSlice","name","initialState","loadState","query","components","reducers","toggleLoad","state","action","setComponents","payload","removeComponent","filter","c","id","resetComponents","filterComponents","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,WADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,KADC;AAEZC,IAAAA,KAAK,EAAE,EAFK;AAGZC,IAAAA,UAAU,EAAE;AAHA,GAFc;AAQ5B;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACL,SAAN,GAAkB,CAACK,KAAK,CAACL,SAAzB;AAAoC,KADxD;;AAERO,IAAAA,aAAa,CAACF,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACE,OAA1B;AAAmC,KAF1D;;AAGRC,IAAAA,eAAe,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AAC7BD,MAAAA,KAAK,CAACH,UAAN,GAAmBG,KAAK,CAACH,UAAN,CAAiBQ,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACE,OAA7C,CAAnB;AACD,KALO;;AAMRK,IAAAA,eAAe,CAACR,KAAD,EAAQC,MAAR,EAAgB;AAC7BD,MAAAA,KAAK,CAACH,UAAN,GAAmB,EAAnB;AACD,KARO;;AASRY,IAAAA,gBAAgB,CAACT,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACE,OAArB;AAA8B;;AATxD;AATkB,CAAD,CAA7B;AAsBA,OAAO,MAAM;AACXJ,EAAAA,UADW;AAEXG,EAAAA,aAFW;AAGXM,EAAAA,eAHW;AAIXJ,EAAAA,eAJW;AAKXK,EAAAA;AALW,IAMTjB,SAAS,CAACkB,OANP;AAOP,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\nconst loadSlice = createSlice({\n  name: \"loadSlice\",\n  initialState: {\n    loadState: false,\n    query: \"\",\n    components: [],\n  },\n\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    toggleLoad(state, action) { state.loadState = !state.loadState },\n    setComponents(state, action) { state.components = action.payload },\n    removeComponent(state, action) {\n      state.components = state.components.filter(c => c.id !== action.payload)\n    },\n    resetComponents(state, action) {\n      state.components = [];\n    },\n    filterComponents(state, action) { state.query = action.payload },\n  }\n});\n\nexport const {\n  toggleLoad,\n  setComponents,\n  resetComponents,\n  removeComponent,\n  filterComponents\n} = loadSlice.actions;\nexport default loadSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}