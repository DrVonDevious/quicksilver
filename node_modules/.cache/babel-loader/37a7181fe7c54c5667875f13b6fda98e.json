{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst currentUser = null; // A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\n\nconst userSlice = createSlice({\n  name: \"userSlice\",\n  initialState: {\n    currentUser,\n    users: []\n  },\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    setUsers(state, action) {\n      state.users = action.payload;\n    },\n\n    setUser(state, action) {\n      state.currentUser = action.payload;\n    },\n\n    resetUser(state, action) {\n      state.currentUser = currentUser;\n    }\n\n  }\n});\nexport const {\n  setUser,\n  setUsers,\n  resetUser\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/src/reducers/userReducer.js"],"names":["createSlice","currentUser","userSlice","name","initialState","users","reducers","setUsers","state","action","payload","setUser","resetUser","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,WAAW,GAAG,IAApB,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,WADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZH,IAAAA,WADY;AAEZI,IAAAA,KAAK,EAAE;AAFK,GAFc;AAO5B;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AAA8B,KADhD;;AAERC,IAAAA,OAAO,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACC,OAA3B;AAAoC,KAFrD;;AAGRE,IAAAA,SAAS,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AAAED,MAAAA,KAAK,CAACP,WAAN,GAAoBA,WAApB;AAAiC;;AAHpD;AARkB,CAAD,CAA7B;AAeA,OAAO,MAAM;AAAEU,EAAAA,OAAF;AAAWJ,EAAAA,QAAX;AAAqBK,EAAAA;AAArB,IAAmCV,SAAS,CAACW,OAAnD;AACP,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst currentUser = null;\n\n// A slice is a function from toolkit that combines the functionality\n// of an action and a reducer into one\nconst userSlice = createSlice({\n  name: \"userSlice\",\n  initialState: {\n    currentUser,\n    users: [],\n  },\n\n  // actions are auto-generated by the creation of the reducers\n  reducers: {\n    setUsers(state, action) { state.users = action.payload },\n    setUser(state, action) { state.currentUser = action.payload },\n    resetUser(state, action) { state.currentUser = currentUser }\n  }\n});\n\nexport const { setUser, setUsers, resetUser } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}