{"ast":null,"code":"var _ = require('lodash'),\n    parse = require('../parse'),\n    $ = require('../static'),\n    updateDOM = parse.update,\n    evaluate = parse.evaluate,\n    utils = require('../utils'),\n    domEach = utils.domEach,\n    cloneDom = utils.cloneDom,\n    slice = Array.prototype.slice; // Create an array of nodes, recursing into arrays and parsing strings if\n// necessary\n\n\nexports._makeDomArray = function makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  } else if (elem.cheerio) {\n    return clone ? cloneDom(elem.get(), elem.options) : elem.get();\n  } else if (Array.isArray(elem)) {\n    return _.flatten(elem.map(function (el) {\n      return this._makeDomArray(el, clone);\n    }, this));\n  } else if (typeof elem === 'string') {\n    return evaluate(elem, this.options);\n  } else {\n    return clone ? cloneDom([elem]) : [elem];\n  }\n};\n\nvar _insert = function (concatenator) {\n  return function () {\n    var elems = slice.call(arguments),\n        lastIdx = this.length - 1;\n    return domEach(this, function (i, el) {\n      var dom, domSrc;\n\n      if (typeof elems[0] === 'function') {\n        domSrc = elems[0].call(el, i, $.html(el.children));\n      } else {\n        domSrc = elems;\n      }\n\n      dom = this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n};\n/*\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @param {Array} array Target array to splice.\n * @param {Number} spliceIdx Index at which to begin changing the array.\n * @param {Number} spliceCount Number of elements to remove from the array.\n * @param {Array} newElems Elements to insert into the array.\n *\n * @api private\n */\n\n\nvar uniqueSplice = function (array, spliceIdx, spliceCount, newElems, parent) {\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems),\n      prev = array[spliceIdx - 1] || null,\n      next = array[spliceIdx] || null;\n  var idx, len, prevIdx, node, oldParent; // Before splicing in new elements, ensure they do not already appear in the\n  // current array.\n\n  for (idx = 0, len = newElems.length; idx < len; ++idx) {\n    node = newElems[idx];\n    oldParent = node.parent || node.root;\n    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\n\n    if (oldParent && prevIdx > -1) {\n      oldParent.children.splice(prevIdx, 1);\n\n      if (parent === oldParent && spliceIdx > prevIdx) {\n        spliceArgs[0]--;\n      }\n    }\n\n    node.root = null;\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = node.next || null;\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev || null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n\n  return array.splice.apply(array, spliceArgs);\n};\n\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nexports.after = function () {\n  var elems = slice.call(arguments),\n      lastIdx = this.length - 1;\n  domEach(this, function (i, el) {\n    var parent = el.parent || el.root;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el),\n        domSrc,\n        dom; // If not found, move on\n\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, $.html(el.children));\n    } else {\n      domSrc = elems;\n    }\n\n    dom = this._makeDomArray(domSrc, i < lastIdx); // Add element after `this` element\n\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n  return this;\n};\n\nexports.insertAfter = function (target) {\n  var clones = [],\n      self = this;\n\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n\n    var parent = el.parent || el.root;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el); // If not found, move on\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\nexports.before = function () {\n  var elems = slice.call(arguments),\n      lastIdx = this.length - 1;\n  domEach(this, function (i, el) {\n    var parent = el.parent || el.root;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el),\n        domSrc,\n        dom; // If not found, move on\n\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, $.html(el.children));\n    } else {\n      domSrc = elems;\n    }\n\n    dom = this._makeDomArray(domSrc, i < lastIdx); // Add element before `el` element\n\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n  return this;\n};\n\nexports.insertBefore = function (target) {\n  var clones = [],\n      self = this;\n\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n\n    var parent = el.parent || el.root;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el); // If not found, move on\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n/*\n  remove([selector])\n*/\n\n\nexports.remove = function (selector) {\n  var elems = this; // Filter if we have selector\n\n  if (selector) elems = elems.filter(selector);\n  domEach(elems, function (i, el) {\n    var parent = el.parent || el.root;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el);\n    if (index < 0) return;\n    siblings.splice(index, 1);\n\n    if (el.prev) {\n      el.prev.next = el.next;\n    }\n\n    if (el.next) {\n      el.next.prev = el.prev;\n    }\n\n    el.prev = el.next = el.parent = el.root = null;\n  });\n  return this;\n};\n\nexports.replaceWith = function (content) {\n  var self = this;\n  domEach(this, function (i, el) {\n    var parent = el.parent || el.root;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        dom = self._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content),\n        index; // In the case that `dom` contains nodes that already exist in other\n    // structures, ensure those nodes are properly removed.\n\n\n    updateDOM(dom, null);\n    index = siblings.indexOf(el); // Completely remove old element\n\n    uniqueSplice(siblings, index, 1, dom, parent);\n    el.parent = el.prev = el.next = el.root = null;\n  });\n  return this;\n};\n\nexports.empty = function () {\n  domEach(this, function (i, el) {\n    _.each(el.children, function (el) {\n      el.next = el.prev = el.parent = null;\n    });\n\n    el.children.length = 0;\n  });\n  return this;\n};\n/**\n * Set/Get the HTML\n */\n\n\nexports.html = function (str) {\n  if (str === undefined) {\n    if (!this[0] || !this[0].children) return null;\n    return $.html(this[0].children, this.options);\n  }\n\n  var opts = this.options;\n  domEach(this, function (i, el) {\n    _.each(el.children, function (el) {\n      el.next = el.prev = el.parent = null;\n    });\n\n    var content = str.cheerio ? str.clone().get() : evaluate(str, opts);\n    updateDOM(content, el);\n  });\n  return this;\n};\n\nexports.toString = function () {\n  return $.html(this, this.options);\n};\n\nexports.text = function (str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return $.text(this);\n  } else if (typeof str === 'function') {\n    // Function support\n    return domEach(this, function (i, el) {\n      var $el = [el];\n      return exports.text.call($el, str.call(el, i, $.text($el)));\n    });\n  } // Append text node to each selected elements\n\n\n  domEach(this, function (i, el) {\n    _.each(el.children, function (el) {\n      el.next = el.prev = el.parent = null;\n    });\n\n    var elem = {\n      data: str,\n      type: 'text',\n      parent: el,\n      prev: null,\n      next: null,\n      children: []\n    };\n    updateDOM(elem, el);\n  });\n  return this;\n};\n\nexports.clone = function () {\n  return this._make(cloneDom(this.get(), this.options));\n};","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/node_modules/cheerio/lib/api/manipulation.js"],"names":["_","require","parse","$","updateDOM","update","evaluate","utils","domEach","cloneDom","slice","Array","prototype","exports","_makeDomArray","makeDomArray","elem","clone","cheerio","get","options","isArray","flatten","map","el","_insert","concatenator","elems","call","arguments","lastIdx","length","i","dom","domSrc","html","children","uniqueSplice","array","spliceIdx","spliceCount","newElems","parent","spliceArgs","concat","prev","next","idx","len","prevIdx","node","oldParent","root","indexOf","splice","apply","append","prepend","after","siblings","index","insertAfter","target","clones","self","constructor","_originalRoot","remove","clonedSelf","push","before","insertBefore","selector","filter","replaceWith","content","empty","each","str","undefined","opts","toString","text","$el","data","type","_make"],"mappings":"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","sourcesContent":["var _ = require('lodash'),\n    parse = require('../parse'),\n    $ = require('../static'),\n    updateDOM = parse.update,\n    evaluate = parse.evaluate,\n    utils = require('../utils'),\n    domEach = utils.domEach,\n    cloneDom = utils.cloneDom,\n    slice = Array.prototype.slice;\n\n// Create an array of nodes, recursing into arrays and parsing strings if\n// necessary\nexports._makeDomArray = function makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  } else if (elem.cheerio) {\n    return clone ? cloneDom(elem.get(), elem.options) : elem.get();\n  } else if (Array.isArray(elem)) {\n    return _.flatten(elem.map(function(el) {\n      return this._makeDomArray(el, clone);\n    }, this));\n  } else if (typeof elem === 'string') {\n    return evaluate(elem, this.options);\n  } else {\n    return clone ? cloneDom([elem]) : [elem];\n  }\n};\n\nvar _insert = function(concatenator) {\n  return function() {\n    var elems = slice.call(arguments),\n        lastIdx = this.length - 1;\n\n    return domEach(this, function(i, el) {\n      var dom, domSrc;\n\n      if (typeof elems[0] === 'function') {\n        domSrc = elems[0].call(el, i, $.html(el.children));\n      } else {\n        domSrc = elems;\n      }\n\n      dom = this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n};\n\n/*\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @param {Array} array Target array to splice.\n * @param {Number} spliceIdx Index at which to begin changing the array.\n * @param {Number} spliceCount Number of elements to remove from the array.\n * @param {Array} newElems Elements to insert into the array.\n *\n * @api private\n */\nvar uniqueSplice = function(array, spliceIdx, spliceCount, newElems, parent) {\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems),\n      prev = array[spliceIdx - 1] || null,\n      next = array[spliceIdx] || null;\n  var idx, len, prevIdx, node, oldParent;\n\n  // Before splicing in new elements, ensure they do not already appear in the\n  // current array.\n  for (idx = 0, len = newElems.length; idx < len; ++idx) {\n    node = newElems[idx];\n    oldParent = node.parent || node.root;\n    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\n\n    if (oldParent && prevIdx > -1) {\n      oldParent.children.splice(prevIdx, 1);\n      if (parent === oldParent && spliceIdx > prevIdx) {\n        spliceArgs[0]--;\n      }\n    }\n\n    node.root = null;\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = node.next || null;\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev || null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n  return array.splice.apply(array, spliceArgs);\n};\n\nexports.append = _insert(function(dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n\nexports.prepend = _insert(function(dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nexports.after = function() {\n  var elems = slice.call(arguments),\n      lastIdx = this.length - 1;\n\n  domEach(this, function(i, el) {\n    var parent = el.parent || el.root;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el),\n        domSrc, dom;\n\n    // If not found, move on\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, $.html(el.children));\n    } else {\n      domSrc = elems;\n    }\n    dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element after `this` element\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n\n  return this;\n};\n\nexports.insertAfter = function(target) {\n  var clones = [],\n      self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function(i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent || el.root;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el);\n\n    // If not found, move on\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\nexports.before = function() {\n  var elems = slice.call(arguments),\n      lastIdx = this.length - 1;\n\n  domEach(this, function(i, el) {\n    var parent = el.parent || el.root;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el),\n        domSrc, dom;\n\n    // If not found, move on\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, $.html(el.children));\n    } else {\n      domSrc = elems;\n    }\n\n    dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element before `el` element\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n\n  return this;\n};\n\nexports.insertBefore = function(target) {\n  var clones = [],\n      self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function(i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent || el.root;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el);\n\n    // If not found, move on\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\n/*\n  remove([selector])\n*/\nexports.remove = function(selector) {\n  var elems = this;\n\n  // Filter if we have selector\n  if (selector)\n    elems = elems.filter(selector);\n\n  domEach(elems, function(i, el) {\n    var parent = el.parent || el.root;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        index = siblings.indexOf(el);\n\n    if (index < 0) return;\n\n    siblings.splice(index, 1);\n    if (el.prev) {\n      el.prev.next = el.next;\n    }\n    if (el.next) {\n      el.next.prev = el.prev;\n    }\n    el.prev = el.next = el.parent = el.root = null;\n  });\n\n  return this;\n};\n\nexports.replaceWith = function(content) {\n  var self = this;\n\n  domEach(this, function(i, el) {\n    var parent = el.parent || el.root;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children,\n        dom = self._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content),\n        index;\n\n    // In the case that `dom` contains nodes that already exist in other\n    // structures, ensure those nodes are properly removed.\n    updateDOM(dom, null);\n\n    index = siblings.indexOf(el);\n\n    // Completely remove old element\n    uniqueSplice(siblings, index, 1, dom, parent);\n    el.parent = el.prev = el.next = el.root = null;\n  });\n\n  return this;\n};\n\nexports.empty = function() {\n  domEach(this, function(i, el) {\n    _.each(el.children, function(el) {\n      el.next = el.prev = el.parent = null;\n    });\n\n    el.children.length = 0;\n  });\n  return this;\n};\n\n/**\n * Set/Get the HTML\n */\nexports.html = function(str) {\n  if (str === undefined) {\n    if (!this[0] || !this[0].children) return null;\n    return $.html(this[0].children, this.options);\n  }\n\n  var opts = this.options;\n\n  domEach(this, function(i, el) {\n    _.each(el.children, function(el) {\n      el.next = el.prev = el.parent = null;\n    });\n\n    var content = str.cheerio ? str.clone().get() : evaluate(str, opts);\n\n    updateDOM(content, el);\n  });\n\n  return this;\n};\n\nexports.toString = function() {\n  return $.html(this, this.options);\n};\n\nexports.text = function(str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return $.text(this);\n  } else if (typeof str === 'function') {\n    // Function support\n    return domEach(this, function(i, el) {\n      var $el = [el];\n      return exports.text.call($el, str.call(el, i, $.text($el)));\n    });\n  }\n\n  // Append text node to each selected elements\n  domEach(this, function(i, el) {\n    _.each(el.children, function(el) {\n      el.next = el.prev = el.parent = null;\n    });\n\n    var elem = {\n      data: str,\n      type: 'text',\n      parent: el,\n      prev: null,\n      next: null,\n      children: []\n    };\n\n    updateDOM(elem, el);\n  });\n\n  return this;\n};\n\nexports.clone = function() {\n  return this._make(cloneDom(this.get(), this.options));\n};\n"]},"metadata":{},"sourceType":"script"}