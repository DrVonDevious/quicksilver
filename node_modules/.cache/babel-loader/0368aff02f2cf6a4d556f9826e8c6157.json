{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\nconst postUser = () => {\n  fetch(\"http://localhost:8080/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: action.payload.username,\n      password: action.payload.password\n    })\n  }).then(res => res.json()).then(data => {\n    if (data.jwt) {\n      // state.currentUser = data.user; // this fails because it is nested\n      // localStorage.username = data.user.username;\n      // localStorage.password = data.user.password;\n      // localStorage.token = data.jwt;\n      console.log(`Welcome back ${data.user.username}!`);\n    } else {\n      console.log(\"Invalid Login\");\n    }\n\n    ;\n  });\n};\n\nconst userSlice = createSlice({\n  name: \"userSlice\",\n  initialState: {\n    currentUser: null,\n    users: []\n  },\n  reducers: {\n    setUsers(state, action) {\n      state.users = action.payload;\n    },\n\n    setUser(state, action) {\n      // state.currentUser = action.payload; // this works because it is not nested\n      // console.log(state.currentUser);\n      fetch(\"http://localhost:8080/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: action.payload.username,\n          password: action.payload.password\n        })\n      }).then(res => res.json()).then(data => {\n        if (data.jwt) {\n          //state.currentUser = data.user; // this fails because it is nested\n          localStorage.username = data.user.username;\n          localStorage.password = data.user.password;\n          localStorage.token = data.jwt;\n          console.log(`Welcome back ${data.user.username}!`);\n        } else {\n          console.log(\"Invalid Login\");\n        }\n\n        ;\n      });\n    }\n\n  }\n});\nexport const {\n  setUser,\n  setUsers\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/william/Dev/quicksilver/src/client/src/reducers/userReducer.js"],"names":["createSlice","postUser","fetch","method","headers","body","JSON","stringify","username","action","payload","password","then","res","json","data","jwt","console","log","user","userSlice","name","initialState","currentUser","users","reducers","setUsers","state","setUser","localStorage","token","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrBC,EAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,gBAAU;AAFH,KAF0B;AAMnCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,QAAQ,EAAEC,MAAM,CAACC,OAAP,CAAeF,QADN;AAEnBG,MAAAA,QAAQ,EAAEF,MAAM,CAACC,OAAP,CAAeC;AAFN,KAAf;AAN6B,GAAhC,CAAL,CAWGC,IAXH,CAWQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAXf,EAYGF,IAZH,CAYQG,IAAI,IAAI;AACZ,QAAIA,IAAI,CAACC,GAAT,EAAc;AACR;AACA;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeH,IAAI,CAACI,IAAL,CAAUX,QAAS,GAA/C;AACD,KANL,MAMW;AACLS,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AAAA;AAEF,GAvBP;AAwBD,CAzBD;;AA2BA,MAAME,SAAS,GAAGpB,WAAW,CAAC;AAC5BqB,EAAAA,IAAI,EAAE,WADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE,IADD;AAEZC,IAAAA,KAAK,EAAE;AAFK,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,CAACC,KAAD,EAAQlB,MAAR,EAAgB;AAAEkB,MAAAA,KAAK,CAACH,KAAN,GAAcf,MAAM,CAACC,OAArB;AAA8B,KADhD;;AAGRkB,IAAAA,OAAO,CAACD,KAAD,EAAQlB,MAAR,EAAgB;AACrB;AACA;AACAP,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,oBAAU;AAFH,SAF0B;AAMnCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,QAAQ,EAAEC,MAAM,CAACC,OAAP,CAAeF,QADN;AAEnBG,UAAAA,QAAQ,EAAEF,MAAM,CAACC,OAAP,CAAeC;AAFN,SAAf;AAN6B,OAAhC,CAAL,CAWGC,IAXH,CAWQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAXf,EAYGF,IAZH,CAYQG,IAAI,IAAI;AACZ,YAAIA,IAAI,CAACC,GAAT,EAAc;AACZ;AACAa,UAAAA,YAAY,CAACrB,QAAb,GAAwBO,IAAI,CAACI,IAAL,CAAUX,QAAlC;AACAqB,UAAAA,YAAY,CAAClB,QAAb,GAAwBI,IAAI,CAACI,IAAL,CAAUR,QAAlC;AACAkB,UAAAA,YAAY,CAACC,KAAb,GAAqBf,IAAI,CAACC,GAA1B;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeH,IAAI,CAACI,IAAL,CAAUX,QAAS,GAA/C;AACD,SAND,MAMO;AACLS,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AAAA;AAEF,OAvBH;AAwBD;;AA9BO;AANkB,CAAD,CAA7B;AAwCA,OAAO,MAAM;AAAEU,EAAAA,OAAF;AAAWF,EAAAA;AAAX,IAAwBN,SAAS,CAACW,OAAxC;AACP,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst postUser = () => {\n  fetch(\"http://localhost:8080/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: action.payload.username,\n      password: action.payload.password\n    })\n  })\n    .then(res => res.json())\n    .then(data => {\n      if (data.jwt) {\n            // state.currentUser = data.user; // this fails because it is nested\n            // localStorage.username = data.user.username;\n            // localStorage.password = data.user.password;\n            // localStorage.token = data.jwt;\n            console.log(`Welcome back ${data.user.username}!`);\n          } else {\n            console.log(\"Invalid Login\");\n          };\n\n        })\n};\n\nconst userSlice = createSlice({\n  name: \"userSlice\",\n  initialState: {\n    currentUser: null,\n    users: [],\n  },\n  reducers: {\n    setUsers(state, action) { state.users = action.payload },\n\n    setUser(state, action) {\n      // state.currentUser = action.payload; // this works because it is not nested\n      // console.log(state.currentUser);\n      fetch(\"http://localhost:8080/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: action.payload.username,\n          password: action.payload.password\n        })\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.jwt) {\n            //state.currentUser = data.user; // this fails because it is nested\n            localStorage.username = data.user.username;\n            localStorage.password = data.user.password;\n            localStorage.token = data.jwt;\n            console.log(`Welcome back ${data.user.username}!`);\n          } else {\n            console.log(\"Invalid Login\");\n          };\n\n        })\n    },\n  }\n});\n\nexport const { setUser, setUsers } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}